"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  CollaborationCaret: () => CollaborationCaret,
  default: () => index_default
});
module.exports = __toCommonJS(index_exports);

// src/collaboration-caret.ts
var import_core = require("@tiptap/core");
var import_y_tiptap = require("@tiptap/y-tiptap");
var awarenessStatesToArray = (states) => {
  return Array.from(states.entries()).map(([key, value]) => {
    return {
      clientId: key,
      ...value.user
    };
  });
};
var defaultOnUpdate = () => null;
var CollaborationCaret = import_core.Extension.create({
  name: "collaborationCaret",
  priority: 999,
  addOptions() {
    return {
      provider: null,
      user: {
        name: null,
        color: null
      },
      render: (user) => {
        const cursor = document.createElement("span");
        cursor.classList.add("collaboration-carets__caret");
        cursor.setAttribute("style", `border-color: ${user.color}`);
        const label = document.createElement("div");
        label.classList.add("collaboration-carets__label");
        label.setAttribute("style", `background-color: ${user.color}`);
        label.insertBefore(document.createTextNode(user.name), null);
        cursor.insertBefore(label, null);
        return cursor;
      },
      selectionRender: import_y_tiptap.defaultSelectionBuilder,
      onUpdate: defaultOnUpdate
    };
  },
  onCreate() {
    if (this.options.onUpdate !== defaultOnUpdate) {
      console.warn(
        '[tiptap warn]: DEPRECATED: The "onUpdate" option is deprecated. Please use `editor.storage.collaborationCaret.users` instead. Read more: https://tiptap.dev/api/extensions/collaboration-caret'
      );
    }
    if (!this.options.provider) {
      throw new Error('The "provider" option is required for the CollaborationCaret extension');
    }
  },
  addStorage() {
    return {
      users: []
    };
  },
  addCommands() {
    return {
      updateUser: (attributes) => () => {
        this.options.user = attributes;
        this.options.provider.awareness.setLocalStateField("user", this.options.user);
        return true;
      },
      user: (attributes) => ({ editor }) => {
        console.warn(
          '[tiptap warn]: DEPRECATED: The "user" command is deprecated. Please use "updateUser" instead. Read more: https://tiptap.dev/api/extensions/collaboration-caret'
        );
        return editor.commands.updateUser(attributes);
      }
    };
  },
  addProseMirrorPlugins() {
    return [
      (0, import_y_tiptap.yCursorPlugin)(
        (() => {
          this.options.provider.awareness.setLocalStateField("user", this.options.user);
          this.storage.users = awarenessStatesToArray(this.options.provider.awareness.states);
          this.options.provider.awareness.on("update", () => {
            this.storage.users = awarenessStatesToArray(this.options.provider.awareness.states);
          });
          return this.options.provider.awareness;
        })(),
        {
          cursorBuilder: this.options.render,
          selectionBuilder: this.options.selectionRender
        }
      )
    ];
  }
});

// src/index.ts
var index_default = CollaborationCaret;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CollaborationCaret
});
//# sourceMappingURL=index.cjs.map