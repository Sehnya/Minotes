{"version":3,"sources":["../src/index.ts","../src/collaboration-caret.ts"],"sourcesContent":["import { CollaborationCaret } from './collaboration-caret.js'\n\nexport * from './collaboration-caret.js'\n\nexport default CollaborationCaret\n","import { Extension } from '@tiptap/core'\nimport type { DecorationAttrs } from '@tiptap/pm/view'\nimport { defaultSelectionBuilder, yCursorPlugin } from '@tiptap/y-tiptap'\n\ntype CollaborationCaretStorage = {\n  users: { clientId: number; [key: string]: any }[]\n}\n\nexport interface CollaborationCaretOptions {\n  /**\n   * The Hocuspocus provider instance. This can also be a TiptapCloudProvider instance.\n   * @type {HocuspocusProvider | TiptapCloudProvider}\n   * @example new HocuspocusProvider()\n   */\n  provider: any\n\n  /**\n   * The user details object â€“ feel free to add properties to this object as needed\n   * @example { name: 'John Doe', color: '#305500' }\n   */\n  user: Record<string, any>\n\n  /**\n   * A function that returns a DOM element for the cursor.\n   * @param user The user details object\n   * @example\n   * render: user => {\n   *  const cursor = document.createElement('span')\n   *  cursor.classList.add('collaboration-carets__caret')\n   *  cursor.setAttribute('style', `border-color: ${user.color}`)\n   *\n   *  const label = document.createElement('div')\n   *  label.classList.add('collaboration-carets__label')\n   *  label.setAttribute('style', `background-color: ${user.color}`)\n   *  label.insertBefore(document.createTextNode(user.name), null)\n   *\n   *  cursor.insertBefore(label, null)\n   *  return cursor\n   * }\n   */\n  render(user: Record<string, any>): HTMLElement\n\n  /**\n   * A function that returns a ProseMirror DecorationAttrs object for the selection.\n   * @param user The user details object\n   * @example\n   * selectionRender: user => {\n   * return {\n   *  nodeName: 'span',\n   *  class: 'collaboration-carets__selection',\n   *  style: `background-color: ${user.color}`,\n   *  'data-user': user.name,\n   * }\n   */\n  selectionRender(user: Record<string, any>): DecorationAttrs\n\n  /**\n   * @deprecated The \"onUpdate\" option is deprecated. Please use `editor.storage.collaborationCaret.users` instead. Read more: https://tiptap.dev/api/extensions/collaboration-caret\n   */\n  onUpdate: (users: { clientId: number; [key: string]: any }[]) => null\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    collaborationCaret: {\n      /**\n       * Update details of the current user\n       * @example editor.commands.updateUser({ name: 'John Doe', color: '#305500' })\n       */\n      updateUser: (attributes: Record<string, any>) => ReturnType\n      /**\n       * Update details of the current user\n       *\n       * @deprecated The \"user\" command is deprecated. Please use \"updateUser\" instead. Read more: https://tiptap.dev/api/extensions/collaboration-caret\n       */\n      user: (attributes: Record<string, any>) => ReturnType\n    }\n  }\n\n  interface Storage {\n    collaborationCaret: CollaborationCaretStorage\n  }\n}\n\nconst awarenessStatesToArray = (states: Map<number, Record<string, any>>) => {\n  return Array.from(states.entries()).map(([key, value]) => {\n    return {\n      clientId: key,\n      ...value.user,\n    }\n  })\n}\n\nconst defaultOnUpdate = () => null\n\n/**\n * This extension allows you to add collaboration carets to your editor.\n * @see https://tiptap.dev/api/extensions/collaboration-caret\n */\nexport const CollaborationCaret = Extension.create<CollaborationCaretOptions, CollaborationCaretStorage>({\n  name: 'collaborationCaret',\n\n  priority: 999,\n\n  addOptions() {\n    return {\n      provider: null,\n      user: {\n        name: null,\n        color: null,\n      },\n      render: user => {\n        const cursor = document.createElement('span')\n\n        cursor.classList.add('collaboration-carets__caret')\n        cursor.setAttribute('style', `border-color: ${user.color}`)\n\n        const label = document.createElement('div')\n\n        label.classList.add('collaboration-carets__label')\n        label.setAttribute('style', `background-color: ${user.color}`)\n        label.insertBefore(document.createTextNode(user.name), null)\n        cursor.insertBefore(label, null)\n\n        return cursor\n      },\n      selectionRender: defaultSelectionBuilder,\n      onUpdate: defaultOnUpdate,\n    }\n  },\n\n  onCreate() {\n    if (this.options.onUpdate !== defaultOnUpdate) {\n      console.warn(\n        '[tiptap warn]: DEPRECATED: The \"onUpdate\" option is deprecated. Please use `editor.storage.collaborationCaret.users` instead. Read more: https://tiptap.dev/api/extensions/collaboration-caret',\n      )\n    }\n    if (!this.options.provider) {\n      throw new Error('The \"provider\" option is required for the CollaborationCaret extension')\n    }\n  },\n\n  addStorage() {\n    return {\n      users: [],\n    }\n  },\n\n  addCommands() {\n    return {\n      updateUser: attributes => () => {\n        this.options.user = attributes\n\n        this.options.provider.awareness.setLocalStateField('user', this.options.user)\n\n        return true\n      },\n      user:\n        attributes =>\n        ({ editor }) => {\n          console.warn(\n            '[tiptap warn]: DEPRECATED: The \"user\" command is deprecated. Please use \"updateUser\" instead. Read more: https://tiptap.dev/api/extensions/collaboration-caret',\n          )\n\n          return editor.commands.updateUser(attributes)\n        },\n    }\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      yCursorPlugin(\n        (() => {\n          this.options.provider.awareness.setLocalStateField('user', this.options.user)\n\n          this.storage.users = awarenessStatesToArray(this.options.provider.awareness.states)\n\n          this.options.provider.awareness.on('update', () => {\n            this.storage.users = awarenessStatesToArray(this.options.provider.awareness.states)\n          })\n\n          return this.options.provider.awareness\n        })(),\n        {\n          cursorBuilder: this.options.render,\n          selectionBuilder: this.options.selectionRender,\n        },\n      ),\n    ]\n  },\n})\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,kBAA0B;AAE1B,sBAAuD;AAkFvD,IAAM,yBAAyB,CAAC,WAA6C;AAC3E,SAAO,MAAM,KAAK,OAAO,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM;AACxD,WAAO;AAAA,MACL,UAAU;AAAA,MACV,GAAG,MAAM;AAAA,IACX;AAAA,EACF,CAAC;AACH;AAEA,IAAM,kBAAkB,MAAM;AAMvB,IAAM,qBAAqB,sBAAU,OAA6D;AAAA,EACvG,MAAM;AAAA,EAEN,UAAU;AAAA,EAEV,aAAa;AACX,WAAO;AAAA,MACL,UAAU;AAAA,MACV,MAAM;AAAA,QACJ,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,MACA,QAAQ,UAAQ;AACd,cAAM,SAAS,SAAS,cAAc,MAAM;AAE5C,eAAO,UAAU,IAAI,6BAA6B;AAClD,eAAO,aAAa,SAAS,iBAAiB,KAAK,KAAK,EAAE;AAE1D,cAAM,QAAQ,SAAS,cAAc,KAAK;AAE1C,cAAM,UAAU,IAAI,6BAA6B;AACjD,cAAM,aAAa,SAAS,qBAAqB,KAAK,KAAK,EAAE;AAC7D,cAAM,aAAa,SAAS,eAAe,KAAK,IAAI,GAAG,IAAI;AAC3D,eAAO,aAAa,OAAO,IAAI;AAE/B,eAAO;AAAA,MACT;AAAA,MACA,iBAAiB;AAAA,MACjB,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EAEA,WAAW;AACT,QAAI,KAAK,QAAQ,aAAa,iBAAiB;AAC7C,cAAQ;AAAA,QACN;AAAA,MACF;AAAA,IACF;AACA,QAAI,CAAC,KAAK,QAAQ,UAAU;AAC1B,YAAM,IAAI,MAAM,wEAAwE;AAAA,IAC1F;AAAA,EACF;AAAA,EAEA,aAAa;AACX,WAAO;AAAA,MACL,OAAO,CAAC;AAAA,IACV;AAAA,EACF;AAAA,EAEA,cAAc;AACZ,WAAO;AAAA,MACL,YAAY,gBAAc,MAAM;AAC9B,aAAK,QAAQ,OAAO;AAEpB,aAAK,QAAQ,SAAS,UAAU,mBAAmB,QAAQ,KAAK,QAAQ,IAAI;AAE5E,eAAO;AAAA,MACT;AAAA,MACA,MACE,gBACA,CAAC,EAAE,OAAO,MAAM;AACd,gBAAQ;AAAA,UACN;AAAA,QACF;AAEA,eAAO,OAAO,SAAS,WAAW,UAAU;AAAA,MAC9C;AAAA,IACJ;AAAA,EACF;AAAA,EAEA,wBAAwB;AACtB,WAAO;AAAA,UACL;AAAA,SACG,MAAM;AACL,eAAK,QAAQ,SAAS,UAAU,mBAAmB,QAAQ,KAAK,QAAQ,IAAI;AAE5E,eAAK,QAAQ,QAAQ,uBAAuB,KAAK,QAAQ,SAAS,UAAU,MAAM;AAElF,eAAK,QAAQ,SAAS,UAAU,GAAG,UAAU,MAAM;AACjD,iBAAK,QAAQ,QAAQ,uBAAuB,KAAK,QAAQ,SAAS,UAAU,MAAM;AAAA,UACpF,CAAC;AAED,iBAAO,KAAK,QAAQ,SAAS;AAAA,QAC/B,GAAG;AAAA,QACH;AAAA,UACE,eAAe,KAAK,QAAQ;AAAA,UAC5B,kBAAkB,KAAK,QAAQ;AAAA,QACjC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;;;AD1LD,IAAO,gBAAQ;","names":[]}